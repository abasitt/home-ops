---
configMaps:
  config:
    data:
      ufw-rules.sh: |
        #!/bin/bash
        find /etc/ufw/ -name "*.rules.*" -type f -mtime +30 -exec rm -f {} \;
        ufw --force reset

        #default rules
        ufw default deny incoming
        ufw default deny outgoing

        # kubernetes internal rules
        ufw allow out to 10.40.0.0/16 #kubelet healthcheck to podscidr
        ufw allow out to 10.96.0.0/16 #allow local to output to kubeservice range
        ufw allow from 10.40.0.0/16 to any port 6443 proto tcp #allow podcidr talk to kubeapi

        # router outgoing rules
        ufw allow out 53
        ufw allow out 80/tcp
        ufw allow out 443/tcp
        ufw allow out proto icmp
        #allow outgoing to all home vlan subnets
        #this rule is also mandatory to access kubeapiservvice from hostnetwork pods
        ufw allow out to 192.168.0.0/16 comment "allow out to all vlan subnets"

        # router input rules
        ufw allow from 192.168.0.0/16 to any port 22 proto tcp
        ufw allow from 192.168.0.0/16 to any port 6443 proto tcp #allow access to kubeapi

        #forward filter chain rules
        #block rules towards internet before allow rules
        ufw route deny to 208.67.222.222 comment "block opendns"
        ufw route deny to 208.67.220.220 comment "block opendns"
        ufw route deny to 2620:119:53::53 comment "block opendns"
        ufw route deny to 2620:119:35::35 comment "block opendns"
        #allow internal networks to internet
        ufw route allow in on br0 out on vlan999  comment "allow br0 to internet"
        ufw route allow in on vlan10 out on vlan999 comment "allow vlan10 to internet"
        ufw route allow in on vlan20 out on vlan999 comment "allow vlan20 to internet"
        ufw route allow in on vlan30 out on vlan999 comment "allow vlan30 to internet"
        ufw route allow in on vlan40 out on vlan999 comment "allow vlan40 to internet"

        # Add MASQUERADE rule
        # Create a custom chain for NAT
        # iptables-nft -t nat -N ROUTER_MASQ
        # Add MASQUERADE rule to the custom chain
        # iptables-nft -t nat -A ROUTER_MASQ -s 192.168.0.0/16 -o vlan999 -j MASQUERADE
        # Insert a jump rule in the POSTROUTING chain to the custom chain
        # iptables-nft -t nat -A POSTROUTING -j ROUTER_MASQ

        # Add DNAT rules
        iptables-nft -t nat -N ROUTER_DNAT
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 80 -j DNAT --to-destination 192.168.33.1:80 -m comment --comment "Forward HTTP traffic to istio-ingress"
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 443 -j DNAT --to-destination 192.168.33.1:443 -m comment --comment "Forward HTTPS traffic to istio-ingress"
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 32400 -j DNAT --to-destination 192.168.20.192:32400 -m comment --comment "Forward Plex traffic"
        #iptables-nft -t nat -A ROUTER_DNAT -s 192.168.30.0/24 -p tcp --dport 53 -j DNAT --to-destination 192.168.30.254:53 -m comment --comment "Forward DNS traffic to PiHole" #TODO
        # Insert a jump rule in the PREROUTING chain to the custom chain
        iptables-nft -t nat -A PREROUTING -j ROUTER_DNAT

        # enable ufw
        ufw enable

controllers:
#  uninstall:
#    type: job
#    annotations:
#      # This is what defines this resource as a hook. Without this line, the
#      # job is considered part of the release.
#      helm.sh/hook: pre-delete, pre-upgrade
#      helm.sh/hook-weight: "-5"
#      helm.sh/hook-delete-policy: hook-succeeded
#    pod:
#      hostNetwork: true
#    containers:
#      uninstall:
#        image:
#          repository: alpine
#          tag: 3.20.3
#        command:
#          - /bin/sh
#          - -c
#        args:
#          - |
#            set -x
#            echo "todo cleanup commands"

  ufw:
    type: daemonset
    annotations:
      reloader.stakater.com/auto: "true"
    pod:
      hostNetwork: true
    containers:
      ufw-daemon:
        image: &image
          repository: abasitt/ufw-alpine
          tag: "29112024"
        command:
        - /bin/bash
        - -cex
        - |
          #!/bin/bash
          bash /tmp/ufw-conf/ufw-rules.sh
          sleep infinity
        resources:
          requests:
            cpu: "5m"
            memory: "96Mi"
          limits:
            memory: "512Mi"
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError

persistence:
  ufw:
    type: hostPath
    hostPath: /etc/ufw
    advancedMounts:
#      uninstall:
#        uninstall:
#          - path: /etc/ufw
      ufw:
        ufw-daemon:
          - path: /etc/ufw
  varlog:
    type: hostPath
    hostPath: /var/log
    advancedMounts:
      ufw:
        ufw-daemon:
          - path: /var/log
  config:
    type: configMap
    name: ufw-config
    advancedMounts:
      ufw:
        ufw-daemon:
          - path: /tmp/ufw-conf

serviceAccount:
  create: true

defaultPodOptions:
  tolerations:
    - operator: Exists
      effect: NoSchedule
    - operator: Exists
      effect: NoExecute
