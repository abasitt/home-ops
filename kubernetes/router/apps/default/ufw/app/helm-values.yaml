---
configMaps:
  config:
    data:
      ufw-rules.sh: |
        #!/bin/bash
        find /etc/ufw/ -name "*.rules.*" -type f -mtime +30 -exec rm -f {} \;
        ufw --force reset

        #default rules
        ufw default deny incoming
        ufw default deny outgoing

        # kubernetes internal rules
        ufw allow out to 10.54.0.0/16 #kubelet healthcheck to podscidr
        ufw allow out to 10.55.0.0/16 #allow local to output to kubeservice range
        ufw allow from 10.54.0.0/16 to any port 6443 proto tcp #allow podcidr talk to kubeapi
        ufw allow from 10.54.0.0/16 to any port 10250 proto tcp #allow podcidr talk to kubelet

        # *** Router outgoing Rules ***
        ufw allow out 53
        ufw allow out 80/tcp
        ufw allow out 443/tcp
        #allow outgoing to all home vlan subnets
        #this rule is also mandatory to access kubeapiservvice from hostnetwork pods
        ufw allow out to 192.168.0.0/16 comment "allow out to all vlan subnets"

        # *** Router Input Rules ***
        ufw allow from 192.168.0.0/16 to any port 22 proto tcp
        ufw allow from 192.168.0.0/16 to any port 6443 proto tcp #allow access to kubeapi

        # *** Router Forward Rules ***
        #allow from LAN vlan10 to servers vlan30
        ufw route allow in on vlan10 out on vlan30 to 192.168.30.9 port 22 proto tcp comment "Allow LAN to servers jumpbox on port 22"
        ufw route allow in on vlan10 out on vlan30 to 192.168.30.10 port 22 proto tcp comment "Allow LAN to servers nas on port 22"
        ufw route allow in on vlan10 out on vlan30 to 192.168.33.0/24 port 443 proto tcp comment "Allow LAN to servers Metallb pool on port 443"
        ufw route allow in on vlan10 out on vlan30 to 192.168.33.0/24 port 80 proto tcp comment "Allow LAN to servers Metallb pool on port 443"
        ufw route allow in on vlan10 out on vlan30 to 192.168.33.6 port 32400 proto tcp comment "Allow LAN to servers Plex"

        #allow from IOT vlan20 to servers vlan30
        ufw route allow in on vlan20 out on vlan30 to 192.168.33.6 port 32400 proto tcp comment "Allow IOT to servers Plex"

        #allow from vlan30 server to IOT vlan20
        ufw route allow in on vlan30 out on vlan20 to 192.168.20.5 port 8123 proto tcp comment "Allow servers to IOT Home Assistant"

        #allow from internet vlan999 to servers vlan30
        ufw route allow in on vlan999 out on vlan30 to 192.168.33.1 port 80 proto tcp comment "Allow internet to servers istio-ingress on port 80"
        ufw route allow in on vlan999 out on vlan30 to 192.168.33.1 port 443 proto tcp comment "Allow internet to servers istio-ingress on port 443"
        #ufw route allow in on vlan999 out on vlan30 to 192.168.33.6 port 32400 proto tcp comment "Allow internet to servers Plex"

        #allow from internet vlan999 tunnel broker icmp echo-request, currently allowed from all. todo may be block default and allow only specific
        #ufw route allow in on vlan999 from 66.220.2.74 proto icmp type echo-request comment "allow tunnel broker echo-request from 66.220.2.74"
        #ufw route allow in on vlan999 from 216.218.221.42 proto icmp type echo-request comment "allow tunnel broker echo-request from 216.218.221.42"

        #block rules towards internet before allow rules
        ufw route deny to 208.67.222.222 comment "block opendns"
        ufw route deny to 208.67.220.220 comment "block opendns"
        ufw route deny to 2620:119:53::53 comment "block opendns"
        ufw route deny to 2620:119:35::35 comment "block opendns"

        #allow internal networks to internet
        ufw route allow in on br0 out on vlan999  comment "allow br0 to internet"
        ufw route allow in on vlan10 out on vlan999 comment "allow vlan10 to internet"
        ufw route allow in on vlan20 out on vlan999 comment "allow vlan20 to internet"
        ufw route allow in on vlan30 out on vlan999 comment "allow vlan30 to internet"
        ufw route allow in on vlan40 out on vlan999 comment "allow vlan40 to internet"

        # *** Router outgoing Custom Rrules that are not possible via ufw ***
        iptables-nft -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT -m comment --comment "Allow outgoing ICMP traffic"

        # *** MASQUERADE Rules ***
        # Create a custom chain for NAT
        iptables-nft -t nat -N ROUTER_MASQ
        # Add MASQUERADE rule to the custom chain
        iptables-nft -t nat -A ROUTER_MASQ -s 192.168.0.0/16 -o vlan999 -j MASQUERADE
        # Insert a jump rule in the POSTROUTING chain to the custom chain
        iptables-nft -t nat -A POSTROUTING -j ROUTER_MASQ

        # *** DNAT Rules ***
        iptables-nft -t nat -N ROUTER_DNAT
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 80 -j DNAT --to-destination 192.168.33.1:80 -m comment --comment "Forward HTTP traffic to istio-ingress"
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 443 -j DNAT --to-destination 192.168.33.1:443 -m comment --comment "Forward HTTPS traffic to istio-ingress"
        iptables-nft -t nat -A ROUTER_DNAT -i vlan999 -p tcp --dport 32400 -j DNAT --to-destination 192.168.33.6:32400 -m comment --comment "Forward Plex traffic"
        #iptables-nft -t nat -A ROUTER_DNAT -s 192.168.30.0/24 -p tcp --dport 53 -j DNAT --to-destination 192.168.30.254:53 -m comment --comment "Forward DNS traffic to PiHole" #TODO
        # Insert a jump rule in the PREROUTING chain to the custom chain
        iptables-nft -t nat -A PREROUTING -j ROUTER_DNAT

        # enable ufw
        ufw enable
  ipsum:
    data:
      ipsum-rules.sh: |
        #!/bin/bash

        # URL to download the IP blocklist from the ipsum repository
        ipsum_url='https://raw.githubusercontent.com/stamparm/ipsum/master/ipsum.txt'
        ipsetname=ipsum-blocklist

        # Create the original ipset if it doesn't exist
        ipset create "$ipsetname" hash:ip -exist

        # Create a temporary ipset
        tmpsetname="${ipsetname}-tmp"
        ipset create "$tmpsetname" hash:ip -exist

        # Download the latest IP blocklist
        rawlist=$(curl -sS -f --compressed "$ipsum_url")
        if [ $? -ne 0 ]; then
            echo "Failed to download IP blocklist"
            exit 1
        fi

        # Add IPs to the temporary ipset with filtering
        for ip in $(echo "$rawlist" | grep -v "#" | grep -v -E "\s[1-2]$" | cut -f 1); do
            ipset add "$tmpsetname" $ip -exist
        done

        # Swap the temporary ipset with the existing ipset
        ipset swap "$tmpsetname" "$ipsetname"
        ipset destroy "$tmpsetname"

        # Ensure the iptables rule is in place
        if ! iptables -t raw -C PREROUTING -i vlan999 -m set --match-set "$ipsetname" src -j DROP 2>/dev/null; then
          iptables -t raw -I PREROUTING -i vlan999 -m set --match-set "$ipsetname" src -j DROP
        fi
controllers:
#  uninstall:
#    type: job
#    annotations:
#      # This is what defines this resource as a hook. Without this line, the
#      # job is considered part of the release.
#      helm.sh/hook: pre-delete, pre-upgrade
#      helm.sh/hook-weight: "-5"
#      helm.sh/hook-delete-policy: hook-succeeded
#    pod:
#      hostNetwork: true
#    containers:
#      uninstall:
#        image:
#          repository: alpine
#          tag: 3.20.3
#        command:
#          - /bin/sh
#          - -c
#        args:
#          - |
#            set -x
#            echo "todo cleanup commands"

  ufw:
    type: daemonset
    annotations:
      reloader.stakater.com/auto: "true"
    pod:
      hostNetwork: true
    containers:
      ufw-daemon:
        image: &image
          repository: abasitt/ufw-alpine
          tag: "29112024"
        command:
        - /bin/bash
        - -cex
        - |
          bash /tmp/ufw-conf/ufw-rules.sh
          while true; do
            bash /tmp/ipsum-conf/ipsum-rules.sh
            sleep 86400  # Sleep for 24 hours
          done
        resources:
          requests:
            cpu: "5m"
            memory: "96Mi"
          limits:
            memory: "512Mi"
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError

persistence:
  ufw:
    type: hostPath
    hostPath: /etc/ufw
    advancedMounts:
#      uninstall:
#        uninstall:
#          - path: /etc/ufw
      ufw:
        ufw-daemon:
          - path: /etc/ufw
  varlog:
    type: hostPath
    hostPath: /var/log
    advancedMounts:
      ufw:
        ufw-daemon:
          - path: /var/log
  config:
    type: configMap
    name: ufw-config
    advancedMounts:
      ufw:
        ufw-daemon:
          - path: /tmp/ufw-conf
  ipsum:
    type: configMap
    name: ufw-ipsum
    advancedMounts:
      ufw:
        ufw-daemon:
         - path: /tmp/ipsum-conf

serviceAccount:
  create: true

defaultPodOptions:
  tolerations:
    - operator: Exists
      effect: NoSchedule
    - operator: Exists
      effect: NoExecute
